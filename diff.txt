diff --git a/src/main/java/it/polimi/ingsw/psp1/santorini/cli/commands/CommandHelp.java b/src/main/java/it/polimi/ingsw/psp1/santorini/cli/commands/CommandHelp.java
index ff87f40..f65efcd 100644
--- a/src/main/java/it/polimi/ingsw/psp1/santorini/cli/commands/CommandHelp.java
+++ b/src/main/java/it/polimi/ingsw/psp1/santorini/cli/commands/CommandHelp.java
@@ -36,9 +36,9 @@ public class CommandHelp extends Command {
             String commands = CommandManager.getInstance().getCommandList().stream()
                     .map(Command::getName).collect(Collectors.joining(", "));
 
-            PrintUtils.printFromCommand(commands, 0, 4, true);
             PrintUtils.printFromCommand("", 0, 5, true);
             PrintUtils.printFromCommand("", 0, 6, true);
+            PrintUtils.printFromCommand(commands, 0, 4, true);
             return "Requested all commands";
         }
 
@@ -48,7 +48,9 @@ public class CommandHelp extends Command {
             return "Command not found";
         }
 
-        PrintUtils.printFromCommand(command.get().getName(), 0, 4, true);
+        String aliases = " (" + String.join(", ", command.get().getAliases()) + ")";
+
+        PrintUtils.printFromCommand(command.get().getName() + aliases, 0, 4, true);
         PrintUtils.printFromCommand(command.get().getDesc(), 0, 5, true);
         PrintUtils.printFromCommand(command.get().getUsage(), 0, 6, true);
 
diff --git a/src/main/java/it/polimi/ingsw/psp1/santorini/gui/EnumScene.java b/src/main/java/it/polimi/ingsw/psp1/santorini/gui/EnumScene.java
index 20e2498..87750b5 100644
--- a/src/main/java/it/polimi/ingsw/psp1/santorini/gui/EnumScene.java
+++ b/src/main/java/it/polimi/ingsw/psp1/santorini/gui/EnumScene.java
@@ -41,6 +41,7 @@ public enum EnumScene {
 
     /**
      * Loads the scene
+     *
      * @return loaded scene
      * @throws IOException if file not found
      */
@@ -51,4 +52,15 @@ public enum EnumScene {
 
         return scene;
     }
+
+    /**
+     * Reloads the scene
+     *
+     * @return loaded scene
+     * @throws IOException if file not found
+     */
+    public Parent reload() throws IOException {
+        scene = FXMLLoader.load(getClass().getResource("/scenes/" + resource + ".fxml"));
+        return scene;
+    }
 }
diff --git a/src/main/java/it/polimi/ingsw/psp1/santorini/gui/GuiServerHandler.java b/src/main/java/it/polimi/ingsw/psp1/santorini/gui/GuiServerHandler.java
index 4e3ce5c..de2626f 100644
--- a/src/main/java/it/polimi/ingsw/psp1/santorini/gui/GuiServerHandler.java
+++ b/src/main/java/it/polimi/ingsw/psp1/santorini/gui/GuiServerHandler.java
@@ -3,7 +3,6 @@ package it.polimi.ingsw.psp1.santorini.gui;
 import it.polimi.ingsw.psp1.santorini.gui.controllers.*;
 import it.polimi.ingsw.psp1.santorini.model.map.Point;
 import it.polimi.ingsw.psp1.santorini.model.map.Worker;
-import it.polimi.ingsw.psp1.santorini.model.powers.Power;
 import it.polimi.ingsw.psp1.santorini.network.Client;
 import it.polimi.ingsw.psp1.santorini.network.ServerHandler;
 import it.polimi.ingsw.psp1.santorini.network.packets.EnumTurnState;
@@ -51,35 +50,12 @@ public class GuiServerHandler extends ServerHandler {
 
         super.handleGameData(packet);
 
-        if(!packet.getPlayerData().get(0).getName().equals(first)) {
+        if (!packet.getPlayerData().get(0).getName().equals(first)) {
             GameSceneController.getInstance().highlightCurrentPlayer(packet.getPlayerData().get(0).getName());
         }
 
         if (packet.isForced()) { //resets the map with the data from the packet
-            pool.execute(() -> {
-                GameSceneController.getInstance().resetMap();
-
-                for (Point p : packet.getGameMap().getAllSquares()) {
-                    int level = packet.getGameMap().getLevel(p);
-                    boolean hasDome = packet.getGameMap().hasDome(p);
-
-                    IntStream.range(0, hasDome ? level - 1 : level)
-                            .forEach(i -> GameSceneController.getInstance().addBlockAt(p.x, p.y, false, false));
-
-                    if (hasDome) {
-                        GameSceneController.getInstance().addBlockAt(p.x, p.y, true, false);
-                    }
-                }
-
-                for (PlayerData player : packet.getPlayerData()) {
-                    boolean isOwn = player.getName().equals(playerName);
-                    Color color = getPlayerColorMap().get(player.getName()).getColor();
-
-                    player.getWorkers().stream()
-                            .map(Worker::getPosition)
-                            .forEach(p -> GameSceneController.getInstance().addWorker(p.x, p.y, color, isOwn, false));
-                }
-            });
+            forceReset();
         }
     }
 
@@ -183,15 +159,20 @@ public class GuiServerHandler extends ServerHandler {
             GameSceneController.getInstance().showInteract(packet.getPlayerData().getPower(), false);
         }
 
-        if(yourUpdate && packet.getPlayerState() == EnumTurnState.WIN) {
+        if (yourUpdate && packet.getPlayerState() == EnumTurnState.WIN) {
             GameSceneController.getInstance().showEndGame(playerName, true);
         }
 
-        if(yourUpdate && packet.getPlayerState() == EnumTurnState.LOSE) {
-            GameSceneController.getInstance().showEndGame(playerName, false);
+        if (packet.getPlayerState() == EnumTurnState.LOSE) {
+            if (yourUpdate) {
+                GameSceneController.getInstance().showEndGame(playerName, false);
+            }
+
+            playerDataList.removeIf(playerData -> playerData.getName().equals(packet.getPlayerData().getName()));
+            forceReset();
         }
 
-        if(yourUpdate && packet.getPlayerState() == EnumTurnState.END_TURN) {
+        if (yourUpdate && packet.getPlayerState() == EnumTurnState.END_TURN) {
             GameSceneController.getInstance().setupUndoTimer();
         }
 
@@ -278,7 +259,7 @@ public class GuiServerHandler extends ServerHandler {
     @Override
     public void onDisconnect() {
         pool.schedule(() -> {
-            if(!GameSceneController.getInstance().hasGameEnded()) {
+            if (!GameSceneController.getInstance().hasGameEnded()) {
                 Gui.getInstance().changeSceneSync(EnumScene.IP_SELECT);
                 GameSceneController.getInstance().reset();
             }
@@ -306,4 +287,31 @@ public class GuiServerHandler extends ServerHandler {
         StartingPlayerController.getInstance().reset();
         WaitGodSelectionController.getInstance().reset();
     }
+
+    private void forceReset() {
+        pool.execute(() -> {
+            GameSceneController.getInstance().resetMap();
+
+            for (Point p : gameMap.getAllSquares()) {
+                int level = gameMap.getLevel(p);
+                boolean hasDome = gameMap.hasDome(p);
+
+                IntStream.range(0, hasDome ? level - 1 : level)
+                        .forEach(i -> GameSceneController.getInstance().addBlockAt(p.x, p.y, false, false));
+
+                if (hasDome) {
+                    GameSceneController.getInstance().addBlockAt(p.x, p.y, true, false);
+                }
+            }
+
+            for (PlayerData player : playerDataList) {
+                boolean isOwn = player.getName().equals(playerName);
+                Color color = getPlayerColorMap().get(player.getName()).getColor();
+
+                player.getWorkers().stream()
+                        .map(Worker::getPosition)
+                        .forEach(p -> GameSceneController.getInstance().addWorker(p.x, p.y, color, isOwn, false));
+            }
+        });
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/it/polimi/ingsw/psp1/santorini/gui/controllers/GameSceneController.java b/src/main/java/it/polimi/ingsw/psp1/santorini/gui/controllers/GameSceneController.java
index 34768dd..82ac79a 100644
--- a/src/main/java/it/polimi/ingsw/psp1/santorini/gui/controllers/GameSceneController.java
+++ b/src/main/java/it/polimi/ingsw/psp1/santorini/gui/controllers/GameSceneController.java
@@ -1,6 +1,7 @@
 package it.polimi.ingsw.psp1.santorini.gui.controllers;
 
 import it.polimi.ingsw.psp1.santorini.gui.EnumScene;
+import it.polimi.ingsw.psp1.santorini.gui.Gui;
 import it.polimi.ingsw.psp1.santorini.gui.GuiObserver;
 import it.polimi.ingsw.psp1.santorini.gui.RenderUtils;
 import it.polimi.ingsw.psp1.santorini.model.map.Point;
@@ -50,6 +51,8 @@ public class GameSceneController extends GuiController {
     @FXML
     private SubScene mainScene;
     @FXML
+    private AnchorPane mainPane;
+    @FXML
     private AnchorPane pane;
     @FXML
     private Button menuButton;
@@ -75,6 +78,7 @@ public class GameSceneController extends GuiController {
     private boolean hasGameEnded;
     private RotateTransition undoRotate;
     private Future<?> changeUndoLabel;
+    private Pane endGamePane;
 
     /**
      * @return Singleton instance for this controller
@@ -115,6 +119,7 @@ public class GameSceneController extends GuiController {
 
         RenderUtils.initMouseControl(root, mainScene);
 
+        instance.mainPane = mainPane;
         instance.requestBackground = requestBackground;
         instance.requestText = requestText;
         instance.interactButton = interactButton;
@@ -346,7 +351,8 @@ public class GameSceneController extends GuiController {
             Optional<Group> optWorker = workers.keySet().stream().filter(g -> workers.get(g).equals(from)).findFirst();
 
             if (optWorker.isEmpty()) {
-                throw new NoSuchElementException("Worker not found at given position");
+//                throw new NoSuchElementException("Worker not found at given position");
+                return;
             }
 
             Group worker = optWorker.get();
@@ -444,7 +450,7 @@ public class GameSceneController extends GuiController {
      * Enqueues a map animation
      * Used to keep animations one after another
      *
-     * @param toRun the map change function
+     * @param toRun    the map change function
      * @param duration how much the change takes
      */
     private void runMapChange(Runnable toRun, Duration duration) {
@@ -488,7 +494,8 @@ public class GameSceneController extends GuiController {
                 st.setToY(1D);
                 st.setToZ(1D);
                 st.play();
-                ((AnchorPane) instance.pane.getParent()).getChildren().add(pane);
+                instance.endGamePane = pane;
+                instance.mainPane.getChildren().add(pane);
             } catch (IOException e) {
                 e.printStackTrace();
             }
@@ -498,9 +505,9 @@ public class GameSceneController extends GuiController {
     /**
      * Setup worker 3D model click handling
      *
-     * @param worker the worker model
+     * @param worker         the worker model
      * @param positionToSend position of the worker
-     * @param isOwn if the worker is one of the current player's
+     * @param isOwn          if the worker is one of the current player's
      */
     private void addWorkerClickAction(Group worker, Point positionToSend, boolean isOwn) {
         Duration duration = Duration.millis(100);
@@ -611,6 +618,9 @@ public class GameSceneController extends GuiController {
     @FXML
     private void quitPressed(ActionEvent event) {
         instance.notifyObservers(GuiObserver::disconnect);
+        instance.reset();
+
+        Gui.getInstance().changeSceneSync(EnumScene.IP_SELECT);
     }
 
     /**
@@ -739,16 +749,11 @@ public class GameSceneController extends GuiController {
         Platform.runLater(() -> {
             instance.playerPanes.clear();
             instance.playerIcons.getChildren().clear();
-
-            if (hasGameEnded) {
-                Pane rootPane = ((AnchorPane) instance.pane.getParent());
-                rootPane.getChildren().remove(rootPane.getChildren().size() - 1);
-                pane.setEffect(null);
-            }
-
-            showValidMoves(List.of(), List.of(), EnumTurnState.END_GAME);
-
-            hasGameEnded = false;
+            instance.mainPane.getChildren().remove(instance.endGamePane);
+            instance.hasGameEnded = false;
+            instance.endGamePane = null;
         });
+
+        showValidMoves(List.of(), List.of(), EnumTurnState.END_GAME);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/it/polimi/ingsw/psp1/santorini/gui/controllers/WinLoseController.java b/src/main/java/it/polimi/ingsw/psp1/santorini/gui/controllers/WinLoseController.java
index 43fb15e..e3f27cf 100644
--- a/src/main/java/it/polimi/ingsw/psp1/santorini/gui/controllers/WinLoseController.java
+++ b/src/main/java/it/polimi/ingsw/psp1/santorini/gui/controllers/WinLoseController.java
@@ -2,6 +2,7 @@ package it.polimi.ingsw.psp1.santorini.gui.controllers;
 
 import it.polimi.ingsw.psp1.santorini.gui.EnumScene;
 import it.polimi.ingsw.psp1.santorini.gui.Gui;
+import it.polimi.ingsw.psp1.santorini.gui.GuiObserver;
 import javafx.animation.Animation;
 import javafx.animation.Interpolator;
 import javafx.animation.RotateTransition;
@@ -9,10 +10,12 @@ import javafx.animation.TranslateTransition;
 import javafx.application.Platform;
 import javafx.event.ActionEvent;
 import javafx.fxml.FXML;
+import javafx.scene.control.Button;
 import javafx.scene.control.Label;
 import javafx.scene.image.ImageView;
 import javafx.util.Duration;
 
+import java.io.IOException;
 import java.util.stream.Stream;
 
 /**
@@ -24,31 +27,22 @@ public class WinLoseController extends GuiController {
 
     @FXML
     private ImageView rightTrumpetWin;
-
     @FXML
     private ImageView leftTrumpetWin;
-
     @FXML
     private ImageView leftCloudWin;
-
     @FXML
     private ImageView rightCloudWin;
-
     @FXML
     private ImageView rightTrumpetLose;
-
     @FXML
     private ImageView leftTrumpetLose;
-
     @FXML
     private ImageView leftCloudLose;
-
     @FXML
     private ImageView rightCloudLose;
-
     @FXML
     private Label playerNameWin;
-
     @FXML
     private Label playerNameLose;
 
@@ -150,8 +144,16 @@ public class WinLoseController extends GuiController {
      * @param event gui event
      */
     @FXML
-    void clickMainMenu(ActionEvent event) {
+    private void clickMainMenu(ActionEvent event) {
+        notifyObservers(GuiObserver::disconnect);
+
         Gui.getInstance().changeSceneSync(EnumScene.IP_SELECT);
+
+        try {
+            EnumScene.GAME.reload();
+        } catch (IOException ignored) {
+        }
+
         GameSceneController.getInstance().reset();
         WinLoseController.getInstance().reset();
     }
diff --git a/src/main/java/it/polimi/ingsw/psp1/santorini/model/Game.java b/src/main/java/it/polimi/ingsw/psp1/santorini/model/Game.java
index 5db7072..ffc852b 100644
--- a/src/main/java/it/polimi/ingsw/psp1/santorini/model/Game.java
+++ b/src/main/java/it/polimi/ingsw/psp1/santorini/model/Game.java
@@ -262,6 +262,8 @@ public class Game extends Observable<ModelObserver> {
 
         if (getCurrentPlayer().hasLost() && playerNumber == 3) {
             removeLoser();
+            askRequest(getCurrentPlayer(), EnumRequestType.DISCONNECT);
+            shiftPlayers(-1);
         }
 
         Optional<Player> optWinner = getWinner();
@@ -402,6 +404,8 @@ public class Game extends Observable<ModelObserver> {
 
         if (getCurrentPlayer().hasLost() && playerNumber == 3) {
             removeLoser();
+            askRequest(getCurrentPlayer(), EnumRequestType.DISCONNECT);
+            shiftPlayers(-1);
         }
 
         Optional<Player> optWinner = getWinner();
diff --git a/src/main/java/it/polimi/ingsw/psp1/santorini/network/Client.java b/src/main/java/it/polimi/ingsw/psp1/santorini/network/Client.java
index 4c9e988..0a1e3da 100644
--- a/src/main/java/it/polimi/ingsw/psp1/santorini/network/Client.java
+++ b/src/main/java/it/polimi/ingsw/psp1/santorini/network/Client.java
@@ -1,7 +1,5 @@
 package it.polimi.ingsw.psp1.santorini.network;
 
-import it.polimi.ingsw.psp1.santorini.cli.Color;
-import it.polimi.ingsw.psp1.santorini.cli.PrintUtils;
 import it.polimi.ingsw.psp1.santorini.network.packets.Packet;
 import it.polimi.ingsw.psp1.santorini.network.packets.client.ClientKeepAlive;
 import it.polimi.ingsw.psp1.santorini.network.packets.server.ServerKeepAlive;
@@ -56,6 +54,10 @@ public class Client implements Runnable {
      */
     public void disconnect() {
         try {
+            if (!connected) {
+                return;
+            }
+
             connected = false;
 
             if (server != null) {
diff --git a/src/main/java/it/polimi/ingsw/psp1/santorini/network/ServerHandler.java b/src/main/java/it/polimi/ingsw/psp1/santorini/network/ServerHandler.java
index 3c39c49..0ea85c6 100644
--- a/src/main/java/it/polimi/ingsw/psp1/santorini/network/ServerHandler.java
+++ b/src/main/java/it/polimi/ingsw/psp1/santorini/network/ServerHandler.java
@@ -70,7 +70,7 @@ public abstract class ServerHandler implements NetHandler {
         playerDataList.clear();
         playerDataList.addAll(playerList);
 
-        if (playerColorMap.size() != playerList.size()) {
+        if (playerColorMap.size() < playerList.size()) {
             List<PlayerData> copy = new ArrayList<>(playerDataList);
             copy.sort(Comparator.comparing(PlayerData::getName));
 
diff --git a/src/main/java/it/polimi/ingsw/psp1/santorini/network/packets/EnumTurnState.java b/src/main/java/it/polimi/ingsw/psp1/santorini/network/packets/EnumTurnState.java
index 1b501ca..9e7fc7e 100644
--- a/src/main/java/it/polimi/ingsw/psp1/santorini/network/packets/EnumTurnState.java
+++ b/src/main/java/it/polimi/ingsw/psp1/santorini/network/packets/EnumTurnState.java
@@ -17,6 +17,7 @@ public enum EnumTurnState {
     LOSE,
     END_GAME;
 
+
     /**
      * Checks the type of a generic state
      *
diff --git a/src/main/java/it/polimi/ingsw/psp1/santorini/network/packets/server/ServerGameData.java b/src/main/java/it/polimi/ingsw/psp1/santorini/network/packets/server/ServerGameData.java
index e65ee4f..225a3c2 100644
--- a/src/main/java/it/polimi/ingsw/psp1/santorini/network/packets/server/ServerGameData.java
+++ b/src/main/java/it/polimi/ingsw/psp1/santorini/network/packets/server/ServerGameData.java
@@ -21,10 +21,11 @@ public class ServerGameData implements Packet<ServerHandler> {
     private final boolean forced;
 
     /**
-     * Generic constructor using map, players and game state
-     * @param gameMap   current gamemap
+     * Constructor using map, players and game state
+     *
+     * @param gameMap   current gameMap
      * @param players   list of players
-     * @param gameState current gamestate
+     * @param gameState current gameState
      * @param forced    true if must be forced
      */
     public ServerGameData(GameMap gameMap, List<PlayerData> players, EnumTurnState gameState, boolean forced) {
@@ -34,9 +35,6 @@ public class ServerGameData implements Packet<ServerHandler> {
         this.forced = forced;
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public void processPacket(ServerHandler netHandler) {
         netHandler.handleGameData(this);
@@ -58,9 +56,6 @@ public class ServerGameData implements Packet<ServerHandler> {
         return forced;
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public String toString() {
         String workers = players.stream().map(PlayerData::toString).collect(Collectors.joining(","));
diff --git a/src/main/resources/scenes/game_scene.fxml b/src/main/resources/scenes/game_scene.fxml
index 0c0f927..161f26e 100644
--- a/src/main/resources/scenes/game_scene.fxml
+++ b/src/main/resources/scenes/game_scene.fxml
@@ -12,7 +12,7 @@
 <?import javafx.scene.layout.VBox?>
 <?import javafx.scene.text.Font?>
 
-<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="600.0" prefWidth="900.0" stylesheets="@game_scene.css" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="it.polimi.ingsw.psp1.santorini.gui.controllers.GameSceneController">
+<AnchorPane fx:id="mainPane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="600.0" prefWidth="900.0" stylesheets="@game_scene.css" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="it.polimi.ingsw.psp1.santorini.gui.controllers.GameSceneController">
   <children>
       <AnchorPane fx:id="pane" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
          <children>
